from aiogram.types.web_app_info import WebAppInfo
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command, CommandStart
from aiogram import html
from aiogram import F
from aiohttp.web import run_app
from aiohttp.web_app import Application
from aiogram.enums import ParseMode
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import Router
import hand.keyboard1 as kb


router = Router()

@router.message(CommandStart())
async def cmd_start(message: types.Message):
    await message.answer(f"–ü—Ä–∏–≤–µ—Ç,{html.bold(html.quote(message.from_user.full_name))}. –†–∞–¥—ã —Ç–µ–±—è –≤–∏–¥–µ—Ç—å. –ò —Å—Ä–∞–∑—É 300 –±–æ–Ω—É—Å–æ–≤ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–∞—Ä—Ç—ã –î—Ä—É–≥–∞ P2P. –ö—Ä—É—Ç–æ? –ö—Ä—É—Ç–æ!", 
                         parse_mode = ParseMode.HTML)

@router.message(Command('home'))
async def cmd_home(message:types.Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç, —ç—Ç–æ –†–æ–≤–µ—Å–Ω–∏–∫! –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ‚¨áÔ∏è",reply_markup=kb.builder.as_markup)

@router.message(F.text.lower() == "–º–µ–Ω—é")
async def menu(message: types.Message):
    await message.answer("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä!")

@router.message(F.text.lower() == "–Ω–∞–ø–∏—Å–∞—Ç—å –æ—Ç–∑—ã–≤")
async def review(message: types.Message):
    await message.answer("–í—ã —É–∂–µ –æ—Å—Ç–∞–≤–∏–ª–∏ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤ –∑–∞ –ø–µ—Ä–∏–æ–¥")

@router.message(F.text.lower() == 'faq')
async def faq(message: types.Message):
    await message.answer("FAQ")
    await message.answer("–ú—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è –ø–æ –∞–¥—Ä–µ—Å—É:"
+"\n" +

"–ú–∞–ª—ã–π –ì–Ω–µ–∑–¥–Ω–∏–∫–æ–≤—Å–∫–∏–π –ø–µ—Ä–µ—É–ª–æ–∫, 9—Å2" +"\n" + "\n" +

"–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:" +"\n" +
"–≤—Å-—á—Ç 12:00‚Äì00:00" +"\n" +
"–ø—Ç-—Å–± 12:00‚Äì06:00"+ "\n" +"\n" + 

"–£–∑–Ω–∞—Ç—å –æ –±–ª–∏–∂–∞–π—à–∏—Ö –∏–≤–µ–Ω—Ç–∞—Ö –∏ –≤–µ—á–µ—Ä–∏–Ω–∫–∞—Ö –º–æ–∂–Ω–æ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ú–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è¬ª, –∞ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–µ–ª–∏–º—Å—è –≤ –Ω–∞—à–µ–º —Ç–µ–ª–µ–≥—Ä–∞–º-–∫–∞–Ω–∞–ª–µ <a href='https://t.me/rovesnikbar'>—Å—Å—ã–ª–∫—É</a> –∏ <a href='https://www.instagram.com/rovesnik.bar/'>—Å—Å—ã–ª–∫—É</a>–∏–Ω—Å—Ç–∞–≥—Ä–∞–º–µ *."+ "\n" +"\n" +

"–ê –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏, –ø–æ–∑–≤–æ–Ω–∏—Ç–µ –Ω–∞–º –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ ‚Äî +7 (999) 912-72-85."+ "\n"+"\n" +

"*–ø—Ä–∏–∑–Ω–∞–Ω –≤ –†–æ—Å—Å–∏–∏ —ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç—Å–∫–æ–π –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–µ–π ü§†")

@router.message(F.text.lower() == "–∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å")
async def bron(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.row(types.KeyboardButton(text="–î–∞"),types.KeyboardButton(text = "–ù–µ—Ç"))
    builder.row(types.KeyboardButton(text="–ù–∞–∑–∞–¥"))
    await message.answer("",reply_markup=builder.as_markup(resize_keyboard=True))

@router.message(F.text.lower() == "–ø—Ä–æ–≥—Ä–∞–º–º–∞ –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏")
async def loyal(message: types.Message):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ú–æ—è –∫–∞—Ä—Ç–∞",
        callback_data="random_value")
    )
    await message.answer(
        "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–∞—Ä—Ç–æ–π –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏, –Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å",
        reply_markup=builder.as_markup()
    )

@router.message(F.text.lower() == '–≤–∞–∫–∞–Ω—Å–∏–∏')
async def vocancy(message: types.message):
    await message.answer("–í–∞–∫–∞–Ω—Å–∏–∏",reply_markup = kb.settings)

@router.message(F.text.lower() == '–≤–∫')
async def vocancy(message: types.message):
    await message.answer("–í–ö",reply_markup = kb.vkapp)